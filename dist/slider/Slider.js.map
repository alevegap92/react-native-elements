{"version":3,"sources":["../../src/slider/Slider.js"],"names":["TRACK_SIZE","THUMB_SIZE","DEFAULT_ANIMATION_CONFIGS","spring","friction","tension","timing","duration","easing","inOut","ease","delay","Slider","props","state","containerSize","width","height","trackSize","thumbSize","value","Value","length","nextProps","newValue","animateTransitions","setCurrentValueAnimated","setCurrentValue","setValue","animationType","animationConfig","toValue","start","panResponder","create","onStartShouldSetPanResponder","onMoveShouldSetPanResponder","onPanResponderGrant","handlePanResponderGrant","bind","onPanResponderMove","handlePanResponderMove","onPanResponderRelease","handlePanResponderEnd","onPanResponderTerminationRequest","handlePanResponderRequestEnd","onPanResponderTerminate","_previousPos","getThumbPos","getCurrentValue","fireChangeEvent","e","gestureState","disabled","getValue","event","nativeEvent","layout","size","setState","prevState","orientation","thumbPos","dy","dx","ratio","step","Math","max","minimumValue","min","maximumValue","round","__getValue","getRatio","minimumTrackTintColor","maximumTrackTintColor","thumbTintColor","containerStyle","style","trackStyle","thumbStyle","debugTouchArea","thumbTouchSize","onSlidingStart","onSlidingComplete","other","process","env","NODE_ENV","onValueChange","mainStyles","styles","interpolate","inputRange","outputRange","valueVisibleStyle","minimumTrackStyle","position","add","backgroundColor","thumbStyleTransform","transform","thumbTransform","translateX","translateY","maximumTrackStyle","container","measureContainer","track","measureTrack","measureThumb","top","bottom","left","right","thumb","panHandlers","propTypes","number","bool","string","shape","func","oneOf","object","defaultProps","flex","borderRadius","touchArea","debugThumbTouchArea","opacity"],"mappings":"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","file":"Slider.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React, { Component } from 'react';\r\nimport { View, StyleSheet, Animated, Easing, PanResponder } from 'react-native';\r\nimport ViewPropTypes from '../config/ViewPropTypes';\r\n\r\n// import shallowCompare from 'react-addons-shallow-compare';\r\n// import styleEqual from 'style-equal'\r\n\r\nconst TRACK_SIZE = 4;\r\nconst THUMB_SIZE = 20;\r\n\r\nvar DEFAULT_ANIMATION_CONFIGS = {\r\n  spring: {\r\n    friction: 7,\r\n    tension: 100,\r\n  },\r\n  timing: {\r\n    duration: 150,\r\n    easing: Easing.inOut(Easing.ease),\r\n    delay: 0,\r\n  },\r\n};\r\n\r\nexport default class Slider extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      containerSize: { width: 0, height: 0 },\r\n      trackSize: { width: 0, height: 0 },\r\n      thumbSize: { width: 0, height: 0 },\r\n      value: new Animated.Value(props.value),\r\n      length: 0,\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    var newValue = nextProps.value;\r\n\r\n    if (this.props.value !== newValue) {\r\n      if (this.props.animateTransitions) {\r\n        this.setCurrentValueAnimated(newValue);\r\n      } else {\r\n        this.setCurrentValue(newValue);\r\n      }\r\n    }\r\n  }\r\n\r\n  setCurrentValue(value) {\r\n    this.state.value.setValue(value);\r\n  }\r\n\r\n  setCurrentValueAnimated(value) {\r\n    var animationType = this.props.animationType;\r\n    var animationConfig = Object.assign(\r\n      {},\r\n      DEFAULT_ANIMATION_CONFIGS[animationType],\r\n      this.props.animationConfig,\r\n      {\r\n        toValue: value,\r\n      }\r\n    );\r\n\r\n    Animated[animationType](this.state.value, animationConfig).start();\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.panResponder = PanResponder.create({\r\n      onStartShouldSetPanResponder: () => true,\r\n      onMoveShouldSetPanResponder: () => false,\r\n      onPanResponderGrant: this.handlePanResponderGrant.bind(this),\r\n      onPanResponderMove: this.handlePanResponderMove.bind(this),\r\n      onPanResponderRelease: this.handlePanResponderEnd.bind(this),\r\n      onPanResponderTerminationRequest: this.handlePanResponderRequestEnd.bind(\r\n        this\r\n      ),\r\n      onPanResponderTerminate: this.handlePanResponderEnd.bind(this),\r\n    });\r\n  }\r\n\r\n  handlePanResponderGrant(/*e: Object, gestureState: Object*/) {\r\n    this._previousPos = this.getThumbPos(this.getCurrentValue());\r\n    this.fireChangeEvent('onSlidingStart');\r\n  }\r\n\r\n  handlePanResponderMove(e, gestureState) {\r\n    if (this.props.disabled) {\r\n      return;\r\n    }\r\n\r\n    this.setCurrentValue(this.getValue(gestureState));\r\n    this.fireChangeEvent('onValueChange');\r\n  }\r\n\r\n  handlePanResponderRequestEnd() {\r\n    // Should we allow another component to take over this pan?\r\n    return false;\r\n  }\r\n\r\n  handlePanResponderEnd(e, gestureState) {\r\n    if (this.props.disabled) {\r\n      return;\r\n    }\r\n\r\n    this.setCurrentValue(this.getValue(gestureState));\r\n    this.fireChangeEvent('onSlidingComplete');\r\n  }\r\n\r\n  fireChangeEvent(event) {\r\n    if (this.props[event]) {\r\n      this.props[event](this.getCurrentValue());\r\n    }\r\n  }\r\n\r\n  measureContainer(e) {\r\n    const { width, height } = e.nativeEvent.layout;\r\n    const size = { width, height };\r\n    this.setState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        containerSize: size,\r\n        length:\r\n          this.props.orientation === 'vertical'\r\n            ? size.height - prevState.thumbSize.height\r\n            : size.width - prevState.thumbSize.width,\r\n      };\r\n    });\r\n  }\r\n\r\n  measureTrack(e) {\r\n    const { width, height } = e.nativeEvent.layout;\r\n    const size = { width, height };\r\n    this.setState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        trackSize: size,\r\n      };\r\n    });\r\n  }\r\n\r\n  measureThumb(e) {\r\n    const { width, height } = e.nativeEvent.layout;\r\n    const size = { width, height };\r\n    this.setState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        thumbSize: size,\r\n        length:\r\n          this.props.orientation === 'vertical'\r\n            ? size.height - prevState.thumbSize.height\r\n            : size.width - prevState.thumbSize.width,\r\n      };\r\n    });\r\n  }\r\n\r\n  getValue(gestureState) {\r\n    var thumbPos =\r\n      this._previousPos +\r\n      (this.props.orientation === 'vertical'\r\n        ? gestureState.dy\r\n        : gestureState.dx);\r\n\r\n    var ratio = thumbPos / this.state.length;\r\n\r\n    if (this.props.step) {\r\n      return Math.max(\r\n        this.props.minimumValue,\r\n        Math.min(\r\n          this.props.maximumValue,\r\n          this.props.minimumValue +\r\n            Math.round(\r\n              ratio *\r\n                (this.props.maximumValue - this.props.minimumValue) /\r\n                this.props.step\r\n            ) *\r\n              this.props.step\r\n        )\r\n      );\r\n    } else {\r\n      return Math.max(\r\n        this.props.minimumValue,\r\n        Math.min(\r\n          this.props.maximumValue,\r\n          ratio * (this.props.maximumValue - this.props.minimumValue) +\r\n            this.props.minimumValue\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  getCurrentValue() {\r\n    return this.state.value.__getValue();\r\n  }\r\n\r\n  getRatio(value) {\r\n    return (\r\n      (value - this.props.minimumValue) /\r\n      (this.props.maximumValue - this.props.minimumValue)\r\n    );\r\n  }\r\n\r\n  getThumbPos(value) {\r\n    var ratio = this.getRatio(value);\r\n    return ratio * this.state.length;\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      minimumValue,\r\n      maximumValue,\r\n      minimumTrackTintColor,\r\n      maximumTrackTintColor,\r\n      thumbTintColor,\r\n      containerStyle,\r\n      style,\r\n      trackStyle,\r\n      thumbStyle,\r\n      debugTouchArea,\r\n      thumbTouchSize,\r\n      onSlidingStart,\r\n      onSlidingComplete,\r\n      animationType,\r\n      animateTransitions,\r\n      animationConfig,\r\n      orientation,\r\n      ...other\r\n    } = this.props;\r\n\r\n    if (process.env.NODE_ENV !== 'test') {\r\n      delete other.onValueChange;\r\n    }\r\n\r\n    var { value, containerSize, trackSize, thumbSize, length } = this.state;\r\n\r\n    var mainStyles = containerStyle || styles;\r\n    var thumbPos = value.interpolate({\r\n      inputRange: [minimumValue, maximumValue],\r\n      outputRange: [0, length],\r\n      // outputRange: orientation === 'vertical' ? [length, 0] : [0, length],\r\n      //extrapolate: 'clamp',\r\n    });\r\n\r\n    var valueVisibleStyle = {};\r\n\r\n    var minimumTrackStyle = {\r\n      position: 'absolute',\r\n      width:\r\n        orientation === 'vertical'\r\n          ? TRACK_SIZE\r\n          : Animated.add(thumbPos, thumbSize.width / 2),\r\n      height:\r\n        orientation === 'vertical'\r\n          ? Animated.add(thumbPos, thumbSize.height / 2)\r\n          : TRACK_SIZE,\r\n      backgroundColor: minimumTrackTintColor,\r\n      ...valueVisibleStyle,\r\n    };\r\n\r\n    const thumbStyleTransform = (thumbStyle && thumbStyle.transform) || [];\r\n    const thumbTransform =\r\n      orientation === 'vertical'\r\n        ? [\r\n            {\r\n              translateX: (trackSize.width - thumbSize.width) / 2,\r\n            },\r\n            { translateY: thumbPos },\r\n          ]\r\n        : [\r\n            { translateX: thumbPos },\r\n            {\r\n              translateY: (trackSize.height - thumbSize.height) / 2,\r\n            },\r\n          ];\r\n\r\n    const maximumTrackStyle =\r\n      orientation === 'vertical'\r\n        ? { width: TRACK_SIZE, height: '100%' }\r\n        : { width: '100%', height: TRACK_SIZE };\r\n    return (\r\n      <View\r\n        {...other}\r\n        style={[mainStyles.container, style]}\r\n        onLayout={e => {\r\n          this.measureContainer(e);\r\n        }}\r\n      >\r\n        <View\r\n          style={[\r\n            { backgroundColor: maximumTrackTintColor },\r\n            mainStyles.track,\r\n            maximumTrackStyle,\r\n            trackStyle,\r\n          ]}\r\n          onLayout={e => {\r\n            this.measureTrack(e);\r\n          }}\r\n        />\r\n        <Animated.View\r\n          style={[mainStyles.track, trackStyle, minimumTrackStyle]}\r\n        />\r\n        <Animated.View\r\n          onLayout={e => {\r\n            this.measureThumb(e);\r\n          }}\r\n          hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}\r\n          style={[\r\n            { backgroundColor: thumbTintColor },\r\n            mainStyles.thumb,\r\n            thumbStyle,\r\n            {\r\n              transform: thumbTransform,\r\n            },\r\n          ]}\r\n          {...this.panResponder.panHandlers}\r\n        />\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nSlider.propTypes = {\r\n  /**\r\n   * Initial value of the slider. The value should be between minimumValue\r\n   * and maximumValue, which default to 0 and 1 respectively.\r\n   * Default value is 0.\r\n   *\r\n   * *This is not a controlled component*, e.g. if you don't update\r\n   * the value, the component won't be reset to its inital value.\r\n   */\r\n  value: PropTypes.number,\r\n\r\n  /**\r\n   * If true the user won't be able to move the slider.\r\n   * Default value is false.\r\n   */\r\n  disabled: PropTypes.bool,\r\n\r\n  /**\r\n   * Initial minimum value of the slider. Default value is 0.\r\n   */\r\n  minimumValue: PropTypes.number,\r\n\r\n  /**\r\n   * Initial maximum value of the slider. Default value is 1.\r\n   */\r\n  maximumValue: PropTypes.number,\r\n\r\n  /**\r\n   * Step value of the slider. The value should be between 0 and\r\n   * (maximumValue - minimumValue). Default value is 0.\r\n   */\r\n  step: PropTypes.number,\r\n\r\n  /**\r\n   * The color used for the track to the left of the button. Overrides the\r\n   * default blue gradient image.\r\n   */\r\n  minimumTrackTintColor: PropTypes.string,\r\n\r\n  /**\r\n   * The color used for the track to the right of the button. Overrides the\r\n   * default blue gradient image.\r\n   */\r\n  maximumTrackTintColor: PropTypes.string,\r\n\r\n  /**\r\n   * The color used for the thumb.\r\n   */\r\n  thumbTintColor: PropTypes.string,\r\n\r\n  /**\r\n   * The size of the touch area that allows moving the thumb.\r\n   * The touch area has the same center has the visible thumb.\r\n   * This allows to have a visually small thumb while still allowing the user\r\n   * to move it easily.\r\n   * The default is {width: 40, height: 40}.\r\n   */\r\n  thumbTouchSize: PropTypes.shape({\r\n    width: PropTypes.number,\r\n    height: PropTypes.number,\r\n  }),\r\n\r\n  /**\r\n   * Callback continuously called while the user is dragging the slider.\r\n   */\r\n  onValueChange: PropTypes.func,\r\n\r\n  /**\r\n   * Callback called when the user starts changing the value (e.g. when\r\n   * the slider is pressed).\r\n   */\r\n  onSlidingStart: PropTypes.func,\r\n\r\n  /**\r\n   * Callback called when the user finishes changing the value (e.g. when\r\n   * the slider is released).\r\n   */\r\n  onSlidingComplete: PropTypes.func,\r\n\r\n  /**\r\n   * The style applied to the slider container.\r\n   */\r\n  style: ViewPropTypes.style,\r\n\r\n  /**\r\n   * The style applied to the track.\r\n   */\r\n  trackStyle: ViewPropTypes.style,\r\n\r\n  /**\r\n   * The style applied to the thumb.\r\n   */\r\n  thumbStyle: ViewPropTypes.style,\r\n\r\n  /**\r\n   * Set this to true to visually see the thumb touch rect in green.\r\n   */\r\n  debugTouchArea: PropTypes.bool,\r\n\r\n  /**\r\n  * Set to true to animate values with default 'timing' animation type\r\n  */\r\n  animateTransitions: PropTypes.bool,\r\n\r\n  /**\r\n  * Custom Animation type. 'spring' or 'timing'.\r\n  */\r\n  animationType: PropTypes.oneOf(['spring', 'timing']),\r\n\r\n  /**\r\n  * Choose the orientation. 'horizontal' or 'vertical'.\r\n  */\r\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\r\n\r\n  /**\r\n  * Used to configure the animation parameters.  These are the same parameters in the Animated library.\r\n  */\r\n  animationConfig: PropTypes.object,\r\n  containerStyle: ViewPropTypes.style,\r\n};\r\n\r\nSlider.defaultProps = {\r\n  value: 0,\r\n  minimumValue: 0,\r\n  maximumValue: 1,\r\n  step: 0,\r\n  minimumTrackTintColor: '#3f3f3f',\r\n  maximumTrackTintColor: '#b3b3b3',\r\n  thumbTintColor: 'red',\r\n  thumbTouchSize: { width: 40, height: 40 },\r\n  debugTouchArea: false,\r\n  animationType: 'timing',\r\n  orientation: 'horizontal',\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n  track: {\r\n    borderRadius: TRACK_SIZE / 2,\r\n  },\r\n  thumb: {\r\n    position: 'absolute',\r\n    width: THUMB_SIZE,\r\n    height: THUMB_SIZE,\r\n    borderRadius: THUMB_SIZE / 2,\r\n  },\r\n  touchArea: {\r\n    position: 'absolute',\r\n    backgroundColor: 'transparent',\r\n    top: 0,\r\n    left: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n  },\r\n  debugThumbTouchArea: {\r\n    position: 'absolute',\r\n    backgroundColor: 'green',\r\n    opacity: 0.5,\r\n  },\r\n});\r\n"]}