{"version":3,"sources":["../../src/overlay/Overlay.js"],"names":["dimensions","get","windowWidth","width","windowHeight","height","ViewPropTypes","propTypes","Overlay","children","props","isVisible","containerStyle","overlayStyle","windowBackgroundColor","overlayBackgroundColor","borderRadius","parseInt","fullScreen","rest","styles","container","backgroundColor","overlay","any","isRequired","bool","style","string","oneOfType","number","create","position","top","left","justifyContent","alignItems","padding","select","ios","shadowColor","shadowOffset","shadowRadius","android","elevation"],"mappings":"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","file":"Overlay.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport {\r\n  View,\r\n  StyleSheet,\r\n  Dimensions,\r\n  Platform,\r\n  ViewPropTypes as RNViewPropTypes,\r\n} from 'react-native';\r\n\r\nconst dimensions = Dimensions.get('window');\r\nconst windowWidth = dimensions.width;\r\nconst windowHeight = dimensions.height;\r\n\r\nconst ViewPropTypes = RNViewPropTypes || View.propTypes;\r\n\r\nconst Overlay = props => {\r\n  const {\r\n    children,\r\n    isVisible,\r\n    containerStyle,\r\n    overlayStyle,\r\n    windowBackgroundColor,\r\n    overlayBackgroundColor,\r\n    borderRadius = parseInt(borderRadius) || 3,\r\n    width,\r\n    height,\r\n    fullScreen,\r\n    ...rest\r\n  } = props;\r\n  if (!isVisible) return null;\r\n  return (\r\n    <View\r\n      style={[\r\n        styles.container,\r\n        windowBackgroundColor && { backgroundColor: windowBackgroundColor },\r\n        containerStyle,\r\n      ]}\r\n      {...rest}\r\n    >\r\n      <View\r\n        style={[\r\n          styles.overlay,\r\n          { borderRadius },\r\n          overlayBackgroundColor && { backgroundColor: overlayBackgroundColor },\r\n          width && { width },\r\n          height && { height },\r\n          fullScreen && { width: windowWidth, height: windowHeight },\r\n          overlayStyle,\r\n        ]}\r\n      >\r\n        {children}\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nOverlay.propTypes = {\r\n  children: PropTypes.any.isRequired,\r\n  isVisible: PropTypes.bool.isRequired,\r\n  containerStyle: ViewPropTypes.style,\r\n  overlayStyle: ViewPropTypes.style,\r\n  windowBackgroundColor: PropTypes.string,\r\n  overlayBackgroundColor: PropTypes.string,\r\n  borderRadius: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  fullScreen: PropTypes.bool,\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0,\r\n    width: windowWidth,\r\n    height: windowHeight,\r\n    backgroundColor: 'rgba(0, 0, 0, .4)',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  overlay: {\r\n    borderRadius: 5,\r\n    width: windowWidth - 80,\r\n    height: windowHeight - 180,\r\n    backgroundColor: 'white',\r\n    padding: 10,\r\n    ...Platform.select({\r\n      ios: {\r\n        shadowColor: 'rgba(0, 0, 0, .3)',\r\n        shadowOffset: { width: 0, height: 1 },\r\n        shadowRadius: 4,\r\n      },\r\n      android: {\r\n        elevation: 2,\r\n      },\r\n    }),\r\n  },\r\n});\r\n\r\nexport default Overlay;\r\n"]}